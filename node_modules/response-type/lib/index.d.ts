export interface IResponseErrorItem {
    domain?: string;
    reason?: string;
    message?: string;
    location?: string;
    locationType?: string;
    extendedHelp?: string;
    sendReport?: string;
}
export interface IResponseError {
    code?: number;
    message: string;
    errors?: Array<IResponseErrorItem>;
}
export interface IResponseData<T> {
    kind?: string;
    fields?: string;
    etag?: string;
    id?: string;
    lang?: string;
    updated?: string;
    deleted?: boolean;
    currentItemCount?: number;
    itemsPerPage?: number;
    startIndex?: number;
    totalItems?: number;
    pageIndex?: number;
    totalPages?: number;
    items?: Array<T>;
    [key: string]: any;
}
export interface IResponse<T> {
    apiVersion?: string;
    context?: string;
    id?: string;
    params?: {
        id?: string;
    };
    data?: IResponseData<T>;
    error?: IResponseError;
}
/**
 * @description Checks if an API is successful regardless of warning messages it has thrown out.
 */
export declare function IsSuccess<T>(response: IResponse<T>): boolean;
/**
 * @description Checks if an API returned a failure response, regardless of http status code.
 * You cannot use IsSuccess and negate it, because if data is present then the API is successful,
 * and error object can refer to the 'warnings' issued.
 */
export declare function IsFailure<T>(response: IResponse<T>): boolean;
/**
 * @description Finds error object for specific field.
 * @param response
 * @param fieldName
 */
export declare function FieldError(response: IResponse<any>, fieldName: string): string;
