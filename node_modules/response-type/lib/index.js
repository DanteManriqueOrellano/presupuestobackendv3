"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldError = exports.IsFailure = exports.IsSuccess = void 0;
/**
 * @description Checks if an API is successful regardless of warning messages it has thrown out.
 */
function IsSuccess(response) {
    // By definition, if data is not present then it is not successful.
    if (response.data) {
        return true;
    }
    return false;
}
exports.IsSuccess = IsSuccess;
/**
 * @description Checks if an API returned a failure response, regardless of http status code.
 * You cannot use IsSuccess and negate it, because if data is present then the API is successful,
 * and error object can refer to the 'warnings' issued.
 */
function IsFailure(response) {
    // By definition, if data is not present then it is not successful.
    if (!response.data && response.error) {
        return true;
    }
    return false;
}
exports.IsFailure = IsFailure;
function isArray(o) {
    return Object.prototype.toString.call(o) === "[object Array]";
}
/**
 * @description Finds error object for specific field.
 * @param response
 * @param fieldName
 */
function FieldError(response, fieldName) {
    if (!response || !response.error || !response.error.errors) {
        return "";
    }
    const $error = response.error.errors.find((x) => x.location === fieldName);
    return $error ? $error.message || "" : "";
}
exports.FieldError = FieldError;
